// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserAuth = `-- name: CheckUserAuth :one
SELECT user_id, username, user_token
FROM users
WHERE username = $1
  AND hashed_password = $2
`

type CheckUserAuthParams struct {
	Username       string
	HashedPassword string
}

type CheckUserAuthRow struct {
	UserID    int64
	Username  string
	UserToken pgtype.UUID
}

func (q *Queries) CheckUserAuth(ctx context.Context, arg CheckUserAuthParams) (CheckUserAuthRow, error) {
	row := q.db.QueryRow(ctx, checkUserAuth, arg.Username, arg.HashedPassword)
	var i CheckUserAuthRow
	err := row.Scan(&i.UserID, &i.Username, &i.UserToken)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, hashed_password, user_token
) VALUES (
  $1, $2, gen_random_uuid()
)
RETURNING user_id, username, hashed_password, user_token
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.HashedPassword,
		&i.UserToken,
	)
	return i, err
}

const getUserToken = `-- name: GetUserToken :one
SELECT user_token
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserToken(ctx context.Context, userID int64) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserToken, userID)
	var user_token pgtype.UUID
	err := row.Scan(&user_token)
	return user_token, err
}

const resetUserToken = `-- name: ResetUserToken :one
UPDATE users
SET user_token = gen_random_uuid()
WHERE user_id = $1
RETURNING user_token
`

func (q *Queries) ResetUserToken(ctx context.Context, userID int64) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, resetUserToken, userID)
	var user_token pgtype.UUID
	err := row.Scan(&user_token)
	return user_token, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
	SET username = $1,
    hashed_password = $2
WHERE user_id = $1
`

type UpdateUserParams struct {
	Username       string
	HashedPassword string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Username, arg.HashedPassword)
	return err
}
